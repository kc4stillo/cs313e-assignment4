"""
Student information for this assignment:

Replace Kyle Castillo with your name.
On my/our honor, Kyle Castillo, this 
programming assignment is my own work and I have not provided this code to 
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: kmc5794
"""


# TODO: implement this function. You may delete this comment when you are done.
def length_of_longest_substring_n3(s):
      """
      Finds the length of the longest substring without repeating characters
      using a brute force approach (O(N^3)).
      
      pre: s is a string of arbitrary length, possibly empty.
      post: Returns an integer >= 0 representing the length of the longest substring
            in s that contains no repeating characters.
      """
      pass

def length_of_longest_substring_n2(s):
      """
      Finds the length of the longest substring without repeating characters
      using a frequency list approach (O(N^2)), converting each character to
      their corresponding numeric representation in ASCII as the index into the
      frequency list.

      pre: s is a string of arbitrary length, possibly empty.
      post: Returns an integer >= 0 representing the length of the longest substring
            in s that contains no repeating characters.
      """
    
      l = 0
      r = 0
      perm = list(s)
      chars = []
      longest_len = 0

      while r < len(s):
            if s[r] not in chars:
                  chars.append(s[r])
                  r += 1
            else:
                  l += 1
                  chars = perm[l:r]
            if len(chars) > longest_len:
                  longest_len = len(chars)

      return longest_len

# TODO: implement this function. You may delete this comment when you are done.
def length_of_longest_substring_n(s):
      """
      Finds the length of the longest substring without repeating characters
      using a frequency list approach (O(N)), converting each character to
      their corresponding numeric representation in ASCII as the index into the
      frequency list. However, this approach stops early, breaking out of the inner
      loop when a repeating character is found. You may also choose to challenge
      yourself by implementing a sliding window approach.

      pre: s is a string of arbitrary length, possibly empty.
      post: Returns an integer >= 0 representing the length of the longest substring
            in s that contains no repeating characters.
      """

      l = 0
      r = 0
      chars = set()
      longest_len = 0

      while r < len(s):
            if s[r] not in chars:
                  chars.add(s[r])
                  r += 1
            else:
                  chars.remove(s[l])
                  l += 1
            if len(chars) > longest_len:
                  longest_len = len(chars)

      return longest_len
